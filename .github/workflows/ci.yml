name: Dotfiles Installation

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  install:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [macos-latest, ubuntu-20.04] # Remove macos since it's expensive to run on GA
        os: [ubuntu-20.04	] # Not doing ubuntu latest due to this error https://askubuntu.com/questions/1431786/grub-efi-amd64-signed-dependency-issue-in-ubuntu-22-04lts

    steps:
      - name: Clean up installed software
        if: matrix.os == 'macos-latest'
        run: |
          brew uninstall --force $(brew list)
          # brew cask uninstall --force $(brew list --cask)
          brew cask uninstall --force firefox google-chrome
          brew cleanup --prune-prefix
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
          rm -rf "$NVM_DIR"

      - name: Download and install available system updates
        if: matrix.os == 'macos-latest'
        run: |
          sudo softwareupdate -i -a

      - name: Clone this repository
        uses: actions/checkout@v3

      - name: Install using Makefile
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            make
          else
            sudo make
          fi

      - name: Verify runcom setup
        run: source $HOME/.bash_profile

      - name: Run tests
        if: matrix.os == 'macos-latest'
        run: make test
  release:
    needs: [install]
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_GH_TOKEN }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
        with:
          # This makes action fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          version: 18.x

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install

      - name: Set git user.name
        run: git config --global user.name "daniel-trevino"

      - name: Set git user.email
        run: git config --global user.email 'daniel-trevino@users.noreply.github.com'

      - name: Release
        run: pnpm run semantic-release
